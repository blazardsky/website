---
import { Image } from 'astro:assets';
import {type MicroImage} from '@lib/microcms'
interface Props {
    images: MicroImage[];
}
const { images } = Astro.props;
---

{images.length >= 2 && (
  <p class="border border-foreground rounded-md text-center mt-8 w-fit mx-auto py-1 px-4 text-sm md:hidden">Scorri <b>{images.length-1}</b> immagin{images.length === 2 ? 'e' : 'i'} &Rarr;</p>
)}

<ul role="group" id="gallery" aria-label="galleria di immagini legate al progetto" class="w-full p-2 md:p-4 mx-auto snap-proximity snap-always snap-x flex flex-row flex-nowrap overflow-x-scroll md:block md:columns-2 md:mt-24">
  {images.map((image, index) => 
    <li class="snap-center m-1 md:my-4 md:first:mt-12 md:mx-0 block min-w-fit">
      <button onclick={`lightbox_open(); lightbox_setImage(${index})`} >
        <Image class="object-contain w-full" loading="lazy" src={image.url} height={image.height} width={image.width} alt="" style={`aspect-ratio: ${image.width}/${image.height}`} data-index={index} />
    </button> 
  </li>
  )}
</ul>

<div role="dialog" aria-modal="false" class="hidden fixed z-50 top-0 left-0 w-screen h-screen items-center justify-center p-4 bg-foreground/90" id="lightbox" data-gallery={JSON.stringify(images)} data-currentid="0">
    <button autofocus class="bg-background focus:bg-accent p-2 fixed top-5 right-5 font-sans text-lg font-light text-foreground leading-none" onclick="lightbox_close()" aria-label="chiudi popup galleria">X</button>
    <Image id="lightbox-image" src={images[0].url} alt="" class="mx-auto max-h-[80vh] w-full object-contain" height={images[0].height} width={images[0].width} />
    <div role="navigation" class="fixed bottom-5 md:bottom-auto flex justify-between items-center w-full mb-5 gap-5 p-5">
        <button class="font-sans text-lg font-bold bg-foreground p-2 text-white" onclick="lightbox_prevSlide()" aria-label="immagine precedente">
            &larr;
        </button>
        <button class="font-sans text-lg font-bold bg-foreground p-2 text-white" onclick="lightbox_nextSlide()" aria-label="prossima immagine">
            &rarr;
        </button>
    </div>
</div>


<script is:inline>
  const lightbox = document.querySelector('#lightbox');
  const lightbox_image = document.querySelector('#lightbox-image');
  const IMAGES = JSON.parse(lightbox.dataset.gallery);

  document.addEventListener('keydown', (e) => {
    if (e.code === 'Escape') {
      lightbox_close()
    }
    if (e.code === 'ArrowLeft'){
      lightbox_prevSlide()
    }
    if (e.code === 'ArrowRight'){
      lightbox_nextSlide()
    }
  });

  function lightbox_close() {
    lightbox.classList.remove('flex');
    lightbox.classList.add('hidden');
    lightbox.ariaModal="false";
  }

  function lightbox_open() {
    lightbox.classList.add('flex');
    lightbox.classList.remove('hidden');
    lightbox.ariaModal="true";
  }

  function lightbox_setImage(index) {
    lightbox.dataset.currentid=index.toString();
    lightbox_image.src = IMAGES[index].url;
    lightbox_image.height = IMAGES[index].height;
    lightbox_image.width = IMAGES[index].width; 
  }

  function lightbox_nextSlide(){
    let index = parseInt(lightbox.dataset.currentid) + 1;
    if (index >= IMAGES.length){
      index = 0
    }
    console.log(index)
    lightbox_setImage(index)
  }

  function lightbox_prevSlide(){
    let index = parseInt(lightbox.dataset.currentid) -1;
    if (index <= 0){
      index = IMAGES.length-1;
    }
    console.log(index)
    lightbox_setImage(index)
  }
</script>

<!-- <script>
  import * as focusTrap from 'focus-trap'; 
  let focus:HTMLElement = document.querySelector('#lightbox')!;
  focusTrap.createFocusTrap(focus);
</script> -->